            .include MACROS.inc

            .org 0

Z:          .data 0 
PLUS1:      .data 1 
MINUS1:     .data (-1)
            JMP Start

tmpA:       .data 0             ; Used by macros
tmpB:       .data 0             ; Used by macros
tmpC:       .data 0             ; Used by macros

atoiVal:        .data 0         ; Result from ATOI operation
compResult:     .data 0         ; Result from string compare operations
pFound:         .data 0         ; Result from FindLine operation

lineNo:         .data 0         ; The current line number executing
offsetNextLine: .data 0         ; Offset to the next line
addrNextLine:   .data 0         ; The computed address of the next line

bitopResult:    .data 0         ; Result from bit operations

program_:   .data program       ; program_ is a constant holding the address of the program array

seed1:          .data 0x1234     ; Seed/state value for the LGC part of the PRNG algorithm
seed2:          .data 0x5678     ; Seed/state value for the LFSR part of the PRNG algorithm (can't be 0)
prngVal:        .data 0          ; 16-bit pseudo-random number generated by the PRNG algorithm
rndVal:         .data 0          ; Random number generated

divRemainder:  .data 0          ; Remainder from DIV operation to be used for modulus operations


;-----------------------------------------------------------------------------
; START OF CODE
;-----------------------------------------------------------------------------
x: .data 0
Start:
        MOV stack_ SP                              ; Initialize the stack pointer

        PUSH msgLogo
        CALL PrintString
        DEBUGPRINT "[Debug mode enabled]\r\n"



;        MOV CONST_1000000 x
;Lupe:
;
;        PUSH CONST_100
;        CALL Random
;        PUSH rndVal
;        CALL PrintInteger
;        PRINTCRLF
;
;        DEC x
;        JMPN0 x Lupe
;
;        HALT


;-----------------------------------------------------------------------------
; COMMAND LINE PROMPT WITH RESETTING THE STACK AFTER ERROR
;-----------------------------------------------------------------------------

Restart:
        CTRLC x                                    ; Clear pending Ctrl-C
        MOV program_ pCode
        MOV stack_ SP                              ; Initialize the stack pointer

;-----------------------------------------------------------------------------
; COMMAND LINE PROMPT
;-----------------------------------------------------------------------------

Prompt:
        PRINTCRLF
        OUT ASCII_GREATER

        CALL InputString        
        MOV buf pCode
        CALL GetParsedToken
        CMPEQ tokenType CONST_0 Prompt          ; Empty line, prompt again

        CMPEQ tokenType CONST_1 Editor          ; Starts with a number, so it's an editor command
        PRINTCRLF
        CMPEQ tokenValue kwLIST PromptLIST      ; LIST command
        CMPEQ tokenValue kwRUN PromptRUN        ; RUN command
        CMPEQ tokenValue kwNEW cmdNEW           ; NEW command
        PUSH msgInvalidPrompt                   ; All other things are invalid
        JMP SyntaxError

;-----------------------------------------------------------------------------
SyntaxError:
;-----------------------------------------------------------------------------

        PUSH msgSyntaxError
        CALL PrintString
        JMP Restart

;-----------------------------------------------------------------------------
ControlC:
;-----------------------------------------------------------------------------

        PUSH msgCtrlC
        CALL PrintString
        JMP Restart

;-----------------------------------------------------------------------------
PromptRUN:
;-----------------------------------------------------------------------------
        CALL GetParsedToken                       ; Get the line number to start running from
        PUSH tokenValue
        CALL FindLine
        MOV pFound pCode

ProgramLine:
        CLR tokenType                           ; Clear the token type so we don't trigger the EOL check in the loop
        INDEXEDRD pCode lineNo                  ; Get Linenumber of current line as a binary value
        JMP0 lineNo cmdEND                      ; If we reach the end of the code it's an implicit END instruction
        INC pCode

        INDEXEDRD pCode offsetNextLine          ; Get offset to next line
        MOV pCode addrNextLine                  ; Calculate the address of the next line by adding the offset to the current location
        ADD offsetNextLine addrNextLine     
        INC addrNextLine

        INC pCode

Statement:
        CTRLC x                             ; Check for Ctrl-C
        JMPN0 x ControlC

        CALL GetParsedToken

        CMPEQ tokenType CONST_0 ProgramLine     ; End-Of-Line?
        CMPNE tokenType CONST_5 notMisc
        CMPEQ tokenValue ASCII_COLON Statement  ; End-Of-Statement?
        JMP SyntaxError        

notMisc:
        ; Check for keywords and handle them
        CMPEQ tokenValue kwEND cmdEND
        CMPEQ tokenValue kwREM cmdREM
        CMPEQ tokenValue kwPRINT cmdPRINT
        CMPEQ tokenValue kwGOTO cmdGOTO
        CMPEQ tokenValue kwLET cmdLET
        CMPEQ tokenValue kwGOSUB cmdGOSUB
        CMPEQ tokenValue kwRETURN cmdRETURN
        CMPEQ tokenValue kwLIST cmdLIST
        CMPEQ tokenValue kwIF cmdIF
        CMPEQ tokenValue kwFOR cmdFOR
        CMPEQ tokenValue kwNEXT cmdNEXT
        CMPEQ tokenValue kwINPUT cmdINPUT
        CMPEQ tokenValue kwPRHEX cmdPRHEX
        JMP SyntaxError




;-----------------------------------------------------------------------------
; MESSAGE STRINGS
;-----------------------------------------------------------------------------

msgLogo:        
        .data $+1
        .data "\r\n"
        .data " __        __        ___  __     ___                __        __     __  "       ,"\r\n"
        .data "/__` |  | |__) |    |__  /  \\     |  | |\\ | \\ /    |__)  /\\  /__` | /  ` "       ,"\r\n"
        .data ".__/ \\__/ |__) |___ |___ \\__\\\\    |  | | \\|  |     |__) /--\\ .__/ | \\__, "       ,"\r\n"
        .data "\r\n"
        .data "[[ version 0.02 - (c) 2024 Mats Engstrom - github.com/mengstr/SUBASIC ]]\r\n", 0
        .data "\r\n"
        .data 0                                         

msgHaltedByEnd:         .data $+1, "\r\n", 0
;msgHaltedByEnd:         .data $+1, "\r\nExecution halted by END\r\n", 0
msgEndOfFile:           .data $+1, "\r\nExecution halted by End Of File\r\n", 0
msgLineNotFound:        .data $+1, "\r\nLine not found\r\n", 0
msgSyntaxError:         .data $+1, "\r\nSyntax error\r\n", 0
msgUnknownCommand:      .data $+1, "Unknown command", 0
msgInvalidToken:        .data $+1, "Invalid token,0
msgInvalidPrompt:       .data $+1, "Invalid command",0
msgInvalidOperator:     .data $+1, "Invalid operator", 0
msgInvalidTokenType:    .data $+1, "Invalid token type", 0
msgDivZeroError:        .data $+1, "\r\nDivision by zero\r\n", 0
msgCtrlC:               .data $+1, "\r\n\r\nHalt by ^C\r\n", 0

;-----------------------------------------------------------------------------
; INCLUDE FILES
;-----------------------------------------------------------------------------

        ;
        ; Standard SUBLEQ macros and functions
        ;

        .include IO.inc
        .include STRING.inc
        .include ATOI.inc
        .include RANDOM.inc
        .include CONSTANTS.inc
        .include STACK.inc

        ;
        ; Subroutines for the BASIC commands
        ;

        .include cmdEND.inc
        .include cmdINPUT.inc
        .include cmdREM.inc
        .include cmdPRINT.inc
        .include cmdGOTO.inc
        .include cmdIF.inc
        .include cmdLET.inc
        .include cmdGOSUB.inc
        .include cmdRETURN.inc
        .include cmdFOR.inc
        .include cmdNEXT.inc
        .include cmdLIST.inc
        .include cmdNEW.inc

        ;
        ; Subroutines for the BASIC utilities
        ;

        .include EDITOR.inc
        .include KEYBOARD.inc
        .include FINDLINE.inc
        .include PARSEEXPRESSION.inc
        .include GETTOKEN.inc
        .include VARIABLES.inc
        .INCLUDE BITOPS.inc
        .include debug.inc


;-----------------------------------------------------------------------------
; BASIC PROGRAM SOURCE CODE
;-----------------------------------------------------------------------------

;        .org 0x7000

program:                                ; The program source code to be run
;L10: .data 10, L20-$-1, "LET A=8123456/10"                            ,0      
;L20: .data 20, Lend-$-1, "PRINT A:PRHEX A"                         ,0

;        .include macrotests/testcasegen/multest.inc
;        .include macrotests/testcasegen/divtest.inc

Lend:.data 0
